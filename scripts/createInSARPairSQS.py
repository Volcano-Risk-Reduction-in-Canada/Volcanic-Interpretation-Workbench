import argparse
import boto3
import configparser


def main():

    args = parse_args()
    config = get_config_params("config.ini")

    # Create SQS client
    sqs = boto3.client('sqs', region_name='ca-central-1')

    queue_url = config.get('AWS',
                           'insarProcessQueue')
    messageAttributes = {
            'referenceDate': {
                'DataType': 'String',
                'StringValue': '{}'.format(args.startDate)
            },
            'pairDate': {
                'DataType': 'String',
                'StringValue': '{}'.format(args.endDate)
            },
            'site': {
                'DataType': 'String',
                'StringValue': '{}'.format(args.site)
            },
            'beam': {
                'DataType': 'String',
                'StringValue': '{}'.format(args.beam)
            }
        }
    # Send message to SQS queue
    response = sqs.send_message(
        QueueUrl=queue_url,
        DelaySeconds=10,
        MessageAttributes=messageAttributes,
        MessageBody=(
            'This is a message indicating which InSAR pairs \
            should be generated by a call to to the duap InSAR Processor'
        )
    )

    # print(response['MessageId'])
    return response


def get_config_params(args):
    """
    Parse Input/Output columns from supplied *.ini file
    """
    configParseObj = configparser.ConfigParser()
    configParseObj.read(args)
    return configParseObj


def parse_args():
    parser = argparse.ArgumentParser(description=("Average Coherence across cc"
                                                  "image and output to list"))
    parser.add_argument("--site",
                        type=str,
                        help='Volcanic Site Name',
                        required=True)
    parser.add_argument("--beam",
                        type=str,
                        help="RCM Beam Mode",
                        required=True)
    parser.add_argument("--startDate",
                        type=str,
                        help="First RCM Image Date for pair",
                        required=True)
    parser.add_argument("--endDate",
                        type=str,
                        help="First RCM Image Date for pair",
                        required=True)
    args = parser.parse_args()

    return args


if __name__ == '__main__':
    main()
